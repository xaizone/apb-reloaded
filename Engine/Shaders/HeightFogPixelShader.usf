/*=============================================================================
	HeightFogPixelShader.usf: Scene fogging pixel shader.
	Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

#include "Common.usf"

static const float FLT_EPSILON = 0.001f;

float2 LinePlaneIntersection(float RelativeB,float2 RelativeZ) {
	return RelativeZ / (abs(RelativeB) <= FLT_EPSILON ? FLT_EPSILON : RelativeB);
}

float4 LinePlaneIntersection(float RelativeB,float4 RelativeZ)
{
	return RelativeZ / (abs(RelativeB) <= FLT_EPSILON ? FLT_EPSILON : RelativeB);
}

float4 FogDistanceScale;
float4 FogExtinctionDistance;
half4 FogInScattering[4];
float4 FogStartDistance;
float FogMinStartDistance;

void OneLayerMain(float4 OutTexCoordAndHeightRelativeZ : TEXCOORD0, float4 ScreenVector : TEXCOORD1, out float4 OutColor : COLOR0)
{
	half SceneDepth = CalcSceneDepth(OutTexCoordAndHeightRelativeZ.xy);

	#if SUPPORTS_DEPTH_TEXTURES
		half ClampedSceneDepth = SceneDepth;
	#else
		float ClampedSceneDepth = clamp(SceneDepth,1,65535 / ALPHA_DEPTH_SCALE_FACTOR);
	#endif

	float3 WorldPosition = ScreenVector.xyz * ClampedSceneDepth;

	float DistInFront = length(WorldPosition) - FogStartDistance.x;

	clip(DistInFront);

	float2 HeightPercent = saturate(LinePlaneIntersection(WorldPosition.z,OutTexCoordAndHeightRelativeZ.zw));
	float LayerDistance = DistInFront * abs(HeightPercent.y - HeightPercent.x);
	float NegFogLineIntegral = FogDistanceScale.x * LayerDistance;

	half Scattering = LayerDistance < FogExtinctionDistance.x ? exp2(NegFogLineIntegral) : 0.0f;
	half InScattering = Scattering - 1;	

	half3 FogColor = InScattering * FogInScattering[3];	
	OutColor = RETURN_COLOR(half4(FogColor,Scattering));
}

void FourLayerMain(float2 TexCoord : TEXCOORD0, float4 ScreenVector : TEXCOORD1, float4 MinHeightRelativeZ : TEXCOORD2, float4 MaxHeightRelativeZ : TEXCOORD3, out float4 OutColor : COLOR0)
{
	half SceneDepth = CalcSceneDepth(TexCoord);

	#if SUPPORTS_DEPTH_TEXTURES
		half ClampedSceneDepth = SceneDepth;
	#else
		float ClampedSceneDepth = clamp(SceneDepth,1,65535);
	#endif

	float MinDistInFront = ClampedSceneDepth - FogMinStartDistance;

	clip(MinDistInFront);

	float3 WorldPosition = ScreenVector.xyz * ClampedSceneDepth;

	float4 MinHeightPercent = LinePlaneIntersection(WorldPosition.z,MinHeightRelativeZ);
	float4 MaxHeightPercent = LinePlaneIntersection(WorldPosition.z,MaxHeightRelativeZ);
	float4 LayerDistance = max(float4(0,0,0,0),ClampedSceneDepth.xxxx - FogStartDistance) * abs(saturate(MaxHeightPercent) - saturate(MinHeightPercent));

	float4 Scattering = LayerDistance < FogExtinctionDistance ? exp2(FogDistanceScale * LayerDistance) : float4(0,0,0,0);
	float4 InScattering = Scattering - 1;

	float3 FogColor = InScattering[3] * FogInScattering[3];
	OutColor = RETURN_COLOR(half4(FogColor,Scattering.w * Scattering.z * Scattering.y * Scattering.x));
}